version: "3.9"

volumes:
  prometheus_data: { }
  grafana_data: { }
  kafka_data:
    driver: local

services:
  handyman:
    container_name: handyman
    image: handyman
    ports:
      - "8080:8080"
    depends_on:
      mongodb:
        condition: service_healthy
    build: ../handyman
    environment:
      - spring.kafka.bootstrap-servers=kafka:9092
      - grpc.server.address=0.0.0.0
      - spring.data.mongodb.uri=mongodb://mongodb:27017/handyman
      - spring.datasource.url=jdbc:postgresql://postgres:5432/vogorode
      - grpc.client.landscape.address=dns:///landscape:9092
      - landscape.baseUrl=http://landscape:8081

  landscape:
    container_name: landscape
    image: landscape
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - spring.kafka.bootstrap-servers=kafka:9092
      - grpc.client.handyman.address=dns:///handyman:9091
      - grpc.client.rancher.address=dns:///rancher:9093
      - spring.datasource.url=jdbc:postgresql://postgres:5432/vogorode
      - grpc.server.address=0.0.0.0
      - handyman.baseUrl=http://handyman:8080
      - rancher.baseUrl=http://rancher:8082
    build: ../landscape

  rancher:
    container_name: rancher
    image: rancher
    ports:
      - "8082:8082"
    depends_on:
      mongodb:
        condition: service_healthy
    build: ../rancher
    environment:
      - spring.kafka.bootstrap-servers=kafka:9092
      - grpc.server.address=0.0.0.0
      - spring.data.mongodb.uri=mongodb://mongodb:27017/rancher
      - spring.datasource.url=jdbc:postgresql://postgres:5432/vogorode
      - grpc.client.landscape.address=dns:///landscape:9092
      - landscape.baseUrl=http://landscape:8081

  postgres:
    container_name: postgres
    image: postgis/postgis
    healthcheck:
      test: pg_isready -U username -d postgresql://postgres:5432/vogorode
    environment:
      - POSTGRES_DB=vogorode
      - POSTGRES_USER=username
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"

  mongodb:
    container_name: mongodb
    image: mongo
    healthcheck:
      test: mongosh --eval "printjson(db.serverStatus())"
    ports:
      - "27017:27017"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ../prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:9.5.1
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring:/etc/grafana/provisioning/dashboards
      - ../datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    expose:
      - 3000
    ports:
      - "3000:3000"

  kafka:
    image: docker.io/bitnami/kafka:3.4
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
